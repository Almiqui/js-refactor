{
  "name": "jsrefactor",
  "displayName": "JS Refactor",
  "description": "JS refactoring tools for adding efficiency to your development workflow.",
  "version": "2.7.0",
  "publisher": "cmstead",
  "repository": {
    "url": "https://github.com/cmstead/js-refactor.git",
    "type": "git"
  },
  "author": {
    "name": "Chris Stead"
  },
  "engines": {
    "vscode": "^0.12.0"
  },
  "categories": [
    "Other",
    "Languages",
    "Snippets"
  ],
  "activationEvents": [
    "onCommand:cmstead.jsRefactor.convertToArrowFunction",
    "onCommand:cmstead.jsRefactor.convertToTemplateLiteral",
    "onCommand:cmstead.jsRefactor.addExport",
    "onCommand:cmstead.jsRefactor.extractMethod",
    "onCommand:cmstead.jsRefactor.extractVariable",
    "onCommand:cmstead.jsRefactor.introduceFunction",
    "onCommand:cmstead.jsRefactor.inlineVariable",
    "onCommand:cmstead.jsRefactor.negateExpression",
    "onCommand:cmstead.jsRefactor.selectRefactoring",
    "onCommand:cmstead.jsRefactor.shiftParams",
    "onCommand:cmstead.jsRefactor.rename",
    "onCommand:cmstead.jsRefactor.wrapInArrowFunction",
    "onCommand:cmstead.jsRefactor.wrapInAsyncFunction",
    "onCommand:cmstead.jsRefactor.wrapInCondition",
    "onCommand:cmstead.jsRefactor.wrapInFunction",
    "onCommand:cmstead.jsRefactor.wrapInGenerator",
    "onCommand:cmstead.jsRefactor.wrapInIIFE",
    "onCommand:cmstead.jsRefactor.wrapInTryCatch",
    "onCommand:cmstead.jsRefactor.wrapSelection"
  ],
  "main": "./extension",
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha --recursive ./test/**/*.test.js",
    "build": "tfx extension create --manifest-globs vss-integration.json",
    "build-docs": "node build-docs",
    "publish": "vsce publish"
  },
  "tags": [
    "Javascript",
    "ECMAScript",
    "Refactoring"
  ],
  "screenshots": [
    {
      "path": "images/extract-to-function-result.png"
    },
    {
      "path": "images/fn-snippet-menu-option.png"
    },
    {
      "path": "images/fn-result-with-anon-menu-option.png"
    }
  ],
  "contributes": {
    "languages": [
      {
        "id": "javascript",
        "extensions": [
          ".js"
        ],
        "aliases": [
          "JS"
        ]
      }
    ],
    "snippets": [
      {
        "language": "javascript",
        "path": "./snippets/jsrefactor.json"
      },
      {
        "language": "typescript",
        "path": "./snippets/jsrefactor.json"
      }
    ],
    "commands": [
      {
        "command": "cmstead.jsRefactor.convertToArrowFunction",
        "title": "JS Refactor: Convert To Arrow Function",
        "description": "Convert function from a function expression to an arrow function"
      },
      {
        "command": "cmstead.jsRefactor.convertToTemplateLiteral",
        "title": "JS Refactor: Convert String Concat To Template Literal",
        "description": "Convert string concatenation expression to template literal"
      },
      {
        "command": "cmstead.jsRefactor.addExport",
        "title": "JS Refactor: Add Export",
        "description": "Export function or variable declaration from local module"
      },
      {
        "command": "cmstead.jsRefactor.extractMethod",
        "title": "JS Refactor: Extract Method",
        "description": "Extract selection into a new function"
      },
      {
        "command": "cmstead.jsRefactor.extractVariable",
        "title": "JS Refactor: Extract Variable",
        "description": "Extract value into a variable"
      },
      {
        "command": "cmstead.jsRefactor.inlineVariable",
        "title": "JS Refactor: Inline Variable",
        "description": "Inline variable"
      },
      {
        "command": "cmstead.jsRefactor.introduceFunction",
        "title": "JS Refactor: Introduce Function",
        "description": "Introduce function from call or variable assignment"
      },
      {
        "command": "cmstead.jsRefactor.negateExpression",
        "title": "JS Refactor: Negate Expression",
        "description": "Negate Expression"
      },
      {
        "command": "cmstead.jsRefactor.rename",
        "title": "JS Refactor: Rename (F2 alias)",
        "description": "Rename"
      },
      {
        "command": "cmstead.jsRefactor.selectRefactoring",
        "title": "JS Refactor: Select Refactoring",
        "description": "Select refactoring to apply"
      },
      {
        "command": "cmstead.jsRefactor.shiftParams",
        "title": "JS Refactor: Shift Parameters",
        "description": "Shift function parameters to new positions"
      },
      {
        "command": "cmstead.jsRefactor.wrapInArrowFunction",
        "title": "JS Refactor: Wrap In Arrow Function",
        "description": "Wrap code in an arrow function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInAsyncFunction",
        "title": "JS Refactor: Wrap In Async Function",
        "description": "Wrap code in an async function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInCondition",
        "title": "JS Refactor: Wrap In Condition",
        "description": "Wrap code in a condition block"
      },
      {
        "command": "cmstead.jsRefactor.wrapInFunction",
        "title": "JS Refactor: Wrap In Function",
        "description": "Wrap code in a named function"
      },
      {
        "command": "cmstead.jsRefactor.wrapInGenerator",
        "title": "JS Refactor: Wrap In Generator",
        "description": "Wrap code in a named generator"
      },
      {
        "command": "cmstead.jsRefactor.wrapInIIFE",
        "title": "JS Refactor: Wrap In IIFE",
        "description": "Wrap code in an immediately invoked function expression"
      },
      {
        "command": "cmstead.jsRefactor.wrapInTryCatch",
        "title": "JS Refactor: Wrap In Try/Catch Block",
        "description": "Wrap code in a try/catch block"
      },
      {
        "command": "cmstead.jsRefactor.wrapSelection",
        "title": "JS Refactor: Wrap Selection",
        "description": "Wrap selected code with generated code"
      }
    ],
    "keybindings": [
      {
        "command": "cmstead.jsRefactor.selectRefactoring",
        "key": "ctrl+shift+j r"
      },
      {
        "command": "cmstead.jsRefactor.extractMethod",
        "key": "ctrl+shift+j m",
        "when": "editorHasSelection"
      },
      {
        "command": "cmstead.jsRefactor.extractVariable",
        "key": "ctrl+shift+j v",
        "when": "editorHasSelection"
      },
      {
        "command": "cmstead.jsRefactor.inlineVariable",
        "key": "ctrl+shift+j i"
      },
      {
        "command": "cmstead.jsRefactor.introduceFunction"
      },
      {
        "command": "cmstead.jsRefactor.convertToArrowFunction",
        "key": "ctrl+shift+j a"
      },
      {
        "command": "cmstead.jsRefactor.convertToTemplateLiteral",
        "key": "ctrl+shift+j l"
      },
      {
        "command": "cmstead.jsRefactor.addExport",
        "key": "ctrl+shift+j x"
      },
      {
        "command": "cmstead.jsRefactor.shiftParams",
        "key": "ctrl+shift+j s"
      },
      {
        "command": "cmstead.jsRefactor.wrapSelection",
        "key": "ctrl+shift+j w",
        "when": "editorHasSelection"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.selectRefactoring",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInArrowFunction",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInAsyncFunction",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInCondition",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInFunction",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInGenerator",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInIIFE",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapInTryCatch",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapSelection",
          "when": "editorHasSelection && resourceLangId == javascript"
        }
      ],
      "editor/context": [
        {
          "command": "cmstead.jsRefactor.convertToArrowFunction",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.convertToTemplateLiteral",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.addExport",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractMethod",
          "group": "5_refactor",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.extractVariable",
          "group": "5_refactor",
          "when": "editorHasSelection && resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.inlineVariable",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.introduceFunction",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.negateExpression",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.rename",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.shiftParams",
          "group": "5_refactor",
          "when": "resourceLangId == javascript"
        },
        {
          "command": "cmstead.jsRefactor.wrapSelection",
          "group": "5_refactor",
          "when": "editorHasSelection && resourceLangId == javascript"
        }
      ]
    }
  },
  "dependencies": {
    "babel-core": "^6.25.0",
    "babylon": "^6.17.4",
    "datamother": "^2.2.4",
    "dject": "^1.4.0",
    "esprima": "^4.0.0",
    "estraverse": "^4.2.0",
    "gulp": "^3.9.1",
    "jfp": "^4.0.0",
    "signet": "^6.4.2",
    "typescript": "^2.4.2"
  },
  "devDependencies": {
    "approvals": "^2.1.2",
    "chai": "^3.4.1",
    "eslint": "^4.3.0",
    "mocha": "^2.3.4",
    "mockery": "^1.4.0",
    "sinon": "^1.17.2",
    "vscode": "^1.1.8"
  },
  "links": {
    "getstarted": {
      "uri": "https://github.com/cmstead/js-refactor/blob/master/README.md"
    },
    "support": {
      "uri": "https://github.com/cmstead/js-refactor/issues"
    }
  },
  "icon": "images/js-refactor-icon.png",
  "galleryBanner": {
    "color": "#ffffee"
  },
  "public": true
}
